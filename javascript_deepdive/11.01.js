//const 키워드를 사용해 선언한 변수는 재할당이 금지된다. 상수는 재할다잉 금지된 변수일 뿐이다.
// const o ={};

//const키워드를 사용해 선언한 변수에 할당한 원시 값(상수) 는 변경 X
//하지만 const 키원드를 사용해 선언한 변수에 할당한 객체는 변경할 수 있다.
// o.a=1;
// console.log(o);

//얕은 복사와 깊은 복사
// 객체를 프로퍼티 값으로 갖는 객체의 경우 얕은 복사는 한단계까지만 복사하는 것을 말하고 
//깊은 복사는 객체에 중첩되어 있는 객체까지 모두 복사하는 것을 말한다.
const o ={x:{y:1}};

//얕은 복사 
const c1 = {...o};
console.log(c1=== o);
console.log(c1.x === o.x); 

// loash의 cloneDeep을 사용한 깊은 복사
// 'npm install lodash'로 lodash를 설치한 후, node.js환경에서 실행

const_ = require('lodash');

//깊은 복사
const c2 = _.cloneDeep(o);
console.log(c2 === o); // false
console.log(c2.x === o.x); //false

// 얕은 복사와 깊은 복사로 생성된 객체는 원본과 다른 객체다. 즉, 원본과 복사본은 참조 값이 다른 별개의 객체다.
// 하지만 얕은 복사는 객체의 중첩되어 있는 객체의 경우 참조 값을 복사하고 깊은 복사는 객체에 중첩되어 있는 개체까지 
// 모두 복사해서 원기시값처럼 완전한 복사본을 만든다는 차이가 있다.
//참고로 다음과 같이 원시 값을 할당한  변수를 다른 변수에 할당하는 것을 깊은 복사, 객체를 할당한 변수를 단른 변수에 할당하는 것을 얕은 복사라고 부를 경우도 있다.



